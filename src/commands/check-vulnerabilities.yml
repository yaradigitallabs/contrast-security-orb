description: >
  After running your tests, query the Contrast API to see if any new
  vulnerabilities were found in your build. Requirements: Python, pip

parameters:
  python-path:
    type: string
    default: /usr/local/bin/python
    description: >
      Absolute path to an installed Python shell

  severities:
    type: env_var_name
    default: CONTRAST_SEVERITIES
    description: >
      Name of an environment variable containing a comma-delimited list of serverities to use when filtering for vulnerabilities.

  application-id:
    type: env_var_name
    default: CONTRAST_APPLICATION_ID
    description: >
      Name of an environment variable containing the ID of your application in Contrast. This is the last component of the URI of your application's page in the contrast UI

  username:
    type: env_var_name
    default: CONTRAST_USERNAME
    description: >
      Name of an environment variable storing your Contrast username

  service-key:
    type: env_var_name
    default: CONTRAST_SERVICE_KEY
    description: >
      Name of an environment variable storing your Contrast service key

  contrast-url:
    type: string
    default: https://app.contrastsecurity.com/Contrast
    description: >
      The Contrast url for your instance. The default is https://app.contrastsecurity.com/Contrast

  org-id:
    type: env_var_name
    default: CONTRAST_ORG_ID
    description: >
      Name of an environment variable storing the organization id for your Contrast organization. This can be found on the "Your Account" page in the Contrast UI.

  api-key:
    type: env_var_name
    default: CONTRAST_API_KEY
    description: >
      Name of environment variable storing your Contrast API key

  vulnerability-threshold:
    type: env_var_name
    default: CONTRAST_VULNERABILITY_THRESHOLD
    description: >
      For what number or greater of open vulnerabilities would you like
      your build to fail?


steps:
  - run:
      name: Check for Python presence
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

        $SUDO pip install requests

  - run:
      name: Install Python modules
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

        $SUDO pip install requests

  - run:
      name: Check Contrast for vulnerabilities
      shell: <<parameters.python-path>>
      command: |
        #!/usr/local/bin/python
        import base64
        import datetime
        import json
        import requests
        import urllib
        import sys
        import os

        headers = {
        'Accept': 'application/json',
        'API-Key': os.path.expandvars("${CONTRAST_API_KEY}"),
        'Authorization': base64.b64encode(os.path.expandvars("${CONTRAST_USERNAME}:${CONTRAST_SERVICE_KEY}"))
        }

        print(headers)
        # Contrast Security API request to get vulnerabilities
        url = os.path.expandvars("https://app.contrastsecurity.com/Contrast/api/ng/${CONTRAST_ORG_ID}/traces/${CONTRAST_APPLICATION_ID}/quick?severities=${CONTRAST_SEVERITIES}")

        print ('HTTP GET ' + url)
        response = requests.get(url, headers = headers)

        # Check the status of the request
        if (not response.ok):
          print ('We could not contact Contrast. Please make sure contrast-url, application-id, org-id, and all credentials are correct')
          sys.exit(1)

        # Parse the JSON content
        json_data = json.loads(response.content)

        vulns_all = 0
        vulns_open = 0

        for filter in json_data['filters']:
          if (filter['name'] == 'All'):
            vulns_all = filter['count']
          elif (filter['name'] == 'Open'):
            vulns_open = filter['count']

        print ('All vulnerabilities: ' + str(vulns_all))
        print ('Open vulnerabilities: ' + str(vulns_open))

        # TODO Set the threshold for the number of vulnerabilities (of given severities)
        if (vulns_open > int(os.path.expandvars("$CONTRAST_VULNERABILITY_THRESHOLD"))):
          print("Above the vulnerabilities threshold. Failing build.")
          sys.exit(1)

